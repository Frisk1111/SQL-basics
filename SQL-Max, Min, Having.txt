CREATE TABLE MEAL_ORDER(
  NAME VARCHAR(255),
  PRICE DOUBLE,
  CALORIES INT,
  ORDER_WHEN TIMESTAMP
  );
  
  
 INSERT INTO MEAL_ORDER(NAME, PRICE, CALORIES, ORDER_WHEN)
 VALUES("Cheesecake", 15.50, 590, DATE_ADD(NOW(), INTERVAL 9 HOUR));
 
 INSERT INTO MEAL_ORDER(NAME, PRICE, CALORIES, ORDER_WHEN)
 VALUES("Cheesecake", 15.50, 590, DATE_ADD(NOW(), INTERVAL 6 HOUR));
 
 INSERT INTO MEAL_ORDER(NAME, PRICE, CALORIES, ORDER_WHEN)
 VALUES("Cheesecake", 15.50, 590, DATE_ADD(NOW(), INTERVAL 5 HOUR));
  
 INSERT INTO MEAL_ORDER(NAME, PRICE, CALORIES, ORDER_WHEN)
 VALUES("pESTO OPasta",10.20, 490 , NOW());
  
 INSERT INTO MEAL_ORDER(NAME, PRICE, CALORIES, ORDER_WHEN)
 VALUES("OPasta",12.35, 510,DATE_ADD(NOW(),  INTERVAL 2 HOUR));
  
 INSERT INTO MEAL_ORDER(NAME, PRICE, CALORIES,ORDER_WHEN)
 VALUES("Hamburger ", 8.68, 450 , DATE_ADD(NOW(), INTERVAL 3 HOUR));
  
 INSERT INTO MEAL_ORDER(NAME, PRICE, CALORIES,ORDER_WHEN)
 VALUES("pESTO OPasta",10.20,490 , DATE_ADD(NOW(), INTERVAL 4 HOUR));
  
 INSERT INTO MEAL_ORDER(NAME, PRICE, CALORIES,ORDER_WHEN)
 VALUES("pESTO OPasta",10.20, 490, DATE_ADD(NOW(), INTERVAL 5 HOUR));
  
 INSERT INTO MEAL_ORDER(NAME, PRICE, CALORIES,ORDER_WHEN)
 VALUES("Hamburger ", 8.68, 450 , DATE_ADD(NOW(), INTERVAL 1 HOUR));
  
 INSERT INTO MEAL_ORDER(NAME, PRICE, CALORIES,ORDER_WHEN)
 VALUES("OPasta",12.35, 510 , DATE_ADD(NOW(),INTERVAL 7 HOUR));
  

# PARTE DI SELECT 
#così seleziono le portate che hanno un prezzo alto e che hanno più di 500 calorie

SELECT
CONCAT('portata con più di 500 calorie: ', NAME) AS C_NAME,
MAX(PRICE) AS MAX_PRICE
FROM MEAL_ORDER
WHERE CALORIES > 500;


#seconda task, seleziona le portate che costano più di 15€ e controlla le loro calore con la funzione AVG()
SELECT
CONCAT('portata che costa più di 15€: ', NAME) AS C_NAME,
AVG(CALORIES) AS AVERAGE_CALORIES_OF_MEAL
FROM MEAL_ORDER
WHERE PRICE > 15;


#TERZA task, seleziona il max price di una portata usando 'HAVING'
SELECT * FROM MEAL_ORDER
HAVING MAX(PRICE);


#QUARTA task, seleziona tutte le portate di meal il cui prezzo è minore di quello averege
SELECT * FROM MEAL_ORDER
HAVING PRICE < AVG(PRICE);


#QUINTA task, come quella di prima ma stavolta devono venire fuori le portate con più di 600 calorie
SELECT * FROM MEAL_ORDER
WHERE CALORIES > 600
HAVING PRICE < AVG(PRICE);